#!/usr/bin/env bash
# health-check - Comprehensive system health check for NixOS

set -euo pipefail

# Colors for output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly BLUE='\033[0;34m'
readonly NC='\033[0m' # No Color

# Configuration
readonly FLAKE_PATH="${HOME}/dotnix"

# Status tracking
ISSUES_FOUND=0
WARNINGS_FOUND=0

# Logging functions
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS_FOUND++))
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
    ((ISSUES_FOUND++))
}

# Check functions
check_nix_flake() {
    log_info "Checking Nix flake validity..."
    if cd "$FLAKE_PATH" && nix flake check --no-build >/dev/null 2>&1; then
        log_success "Flake is valid"
    else
        log_error "Flake check failed"
        return 1
    fi
}

check_system_services() {
    log_info "Checking critical system services..."

    local services=("dbus" "systemd-logind" "NetworkManager")
    for service in "${services[@]}"; do
        if systemctl is-active --quiet "$service" 2>/dev/null; then
            log_success "Service $service is running"
        else
            log_warning "Service $service is not running"
        fi
    done
}

check_disk_space() {
    log_info "Checking disk space..."

    # Check root filesystem
    local root_usage
    root_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')

    if [ "$root_usage" -gt 90 ]; then
        log_error "Root filesystem is ${root_usage}% full"
    elif [ "$root_usage" -gt 75 ]; then
        log_warning "Root filesystem is ${root_usage}% full"
    else
        log_success "Root filesystem usage: ${root_usage}%"
    fi

    # Check Nix store
    local nix_usage
    nix_usage=$(df /nix | tail -1 | awk '{print $5}' | sed 's/%//')

    if [ "$nix_usage" -gt 90 ]; then
        log_error "Nix store is ${nix_usage}% full"
    elif [ "$nix_usage" -gt 75 ]; then
        log_warning "Nix store is ${nix_usage}% full"
    else
        log_success "Nix store usage: ${nix_usage}%"
    fi
}

check_memory_usage() {
    log_info "Checking memory usage..."

    if command -v free >/dev/null 2>&1; then
        local mem_usage
        mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')

        if [ "$mem_usage" -gt 90 ]; then
            log_error "Memory usage is ${mem_usage}%"
        elif [ "$mem_usage" -gt 75 ]; then
            log_warning "Memory usage is ${mem_usage}%"
        else
            log_success "Memory usage: ${mem_usage}%"
        fi
    else
        log_warning "Cannot check memory usage (free command not available)"
    fi
}

check_network_connectivity() {
    log_info "Checking network connectivity..."

    if ping -c 1 -W 2 8.8.8.8 >/dev/null 2>&1; then
        log_success "Internet connectivity is working"
    else
        log_error "No internet connectivity"
    fi
}

check_nix_store_integrity() {
    log_info "Checking Nix store integrity..."

    if nix store verify --no-contents >/dev/null 2>&1; then
        log_success "Nix store integrity is good"
    else
        log_error "Nix store integrity check failed"
    fi
}

check_recent_logs() {
    log_info "Checking for recent system errors..."

    # Check for systemd errors in last hour
    local error_count
    error_count=$(journalctl --since "1 hour ago" --priority err --no-pager | wc -l)

    if [ "$error_count" -gt 0 ]; then
        log_warning "Found $error_count error(s) in system logs (last hour)"
        log_info "Run 'journalctl --since \"1 hour ago\" --priority err' to see details"
    else
        log_success "No recent system errors found"
    fi
}

check_flake_lock_age() {
    log_info "Checking flake lock file age..."

    if [ -f "$FLAKE_PATH/flake.lock" ]; then
        local lock_age_days
        lock_age_days=$(( ($(date +%s) - $(stat -c %Y "$FLAKE_PATH/flake.lock")) / 86400 ))

        if [ "$lock_age_days" -gt 30 ]; then
            log_warning "Flake lock is $lock_age_days days old (consider updating)"
        elif [ "$lock_age_days" -gt 7 ]; then
            log_info "Flake lock is $lock_age_days days old"
        else
            log_success "Flake lock is up to date ($lock_age_days days old)"
        fi
    else
        log_warning "No flake.lock file found"
    fi
}

# Main function
main() {
    echo -e "${BLUE}üîç NixOS System Health Check${NC}"
    echo -e "${BLUE}================================${NC}"
    echo

    # Run all checks
    check_nix_flake
    check_system_services
    check_disk_space
    check_memory_usage
    check_network_connectivity
    check_nix_store_integrity
    check_recent_logs
    check_flake_lock_age

    echo
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}Health Check Summary${NC}"
    echo -e "${BLUE}================================${NC}"

    if [ "$ISSUES_FOUND" -eq 0 ] && [ "$WARNINGS_FOUND" -eq 0 ]; then
        log_success "All checks passed! System is healthy."
        exit 0
    elif [ "$ISSUES_FOUND" -eq 0 ]; then
        log_warning "System is mostly healthy ($WARNINGS_FOUND warning(s) found)"
        exit 0
    else
        log_error "System has issues ($ISSUES_FOUND error(s), $WARNINGS_FOUND warning(s) found)"
        echo
        log_info "Run individual checks or consult the troubleshooting guide for more details"
        exit 1
    fi
}

# Run main function
main "$@"