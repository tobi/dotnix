#!/usr/bin/env bash
# trial-backend - Backend for trial directory creator
# Returns the selected directory path to stdout

set -euo pipefail

# Configuration
readonly TRIAL_DIR="$HOME/src/trials"

# Colors for output (to stderr)
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Function to generate random words (kept for backward compatibility)
words() {
  local num=${1:-2}
  local words

  # Try multiple word sources in order of preference
  local word_sources=(
    "/usr/share/dict/words"
    "/System/Library/Spelling/en_US/Contents/Resources/en_US.dict"
    "/usr/dict/words"
  )

  local dict_file=""
  for source in "${word_sources[@]}"; do
    if [[ -f "$source" && -r "$source" ]]; then
      dict_file="$source"
      break
    fi
  done

  if [[ -z "$dict_file" ]]; then
    # Fallback to a simple word generator
    local fallback_words=("alpha" "beta" "gamma" "delta" "epsilon" "zeta" "eta" "theta" "iota" "kappa" "lambda" "mu" "nu" "xi" "omicron" "pi" "rho" "sigma" "tau" "upsilon" "phi" "chi" "psi" "omega" "quick" "brown" "fox" "jumps" "over" "lazy" "dog" "hello" "world" "test" "demo" "sample" "project" "trial" "code" "hack" "build" "script" "tool" "app")
    local selected_words=()
    for ((i=0; i<num; i++)); do
      selected_words+=("${fallback_words[$((RANDOM % ${#fallback_words[@]}))]}")
    done
    printf "%s" "$(IFS=-; echo "${selected_words[*]}")"
  else
    words=$(cat "$dict_file" | shuf -n "$num" | tr '\n' '-' | tr '[:upper:]' '[:lower:]')
    echo "${words%-}" # Remove trailing hyphen
  fi
}

# Main trial function
main() {
  local SEARCH_TERM="$*"
  local DATE_PREFIX=$(date +%Y-%m-%d)
  local selected_trial
  local existing_trials
  local FULL_PATH
  local options=()

  # Create trial directory if it doesn't exist
  mkdir -p "$TRIAL_DIR"

  # Find existing trial directories (excluding the parent directory itself)
  existing_trials=$(find "$TRIAL_DIR" -maxdepth 1 -type d -not -path "$TRIAL_DIR" 2>/dev/null | sort -r || true)

  # Clean up search term (replace spaces with dashes)
  SEARCH_TERM=$(sed 's/ /-/g' <<< "$SEARCH_TERM")

  # Build the options array
  if [[ -n "$SEARCH_TERM" ]]; then
    CREATE_NEW="+ Create new: ${SEARCH_TERM}"
    options+=("$CREATE_NEW")
  else
    CREATE_NEW="+ Create new"
    options+=("$CREATE_NEW")
  fi

  # Add all existing trials to options
  if [[ -n "$existing_trials" ]]; then
    while IFS= read -r trial_path; do
      if [[ -n "$trial_path" ]]; then
        local trial_name=$(basename "$trial_path")
        options+=("📁 $trial_name")
      fi
    done <<< "$existing_trials"
  fi

  # Check if we have any options
  if [[ ${#options[@]} -eq 0 ]]; then
    echo -e "${YELLOW}No matching trials found.${NC}" >&2
    return 1
  fi

  # Use gum filter for selection
  selected_trial=$(printf '%s\n' "${options[@]}" | gum filter \
    --placeholder="Search trials..." \
    --value="$SEARCH_TERM" \
    --indicator="→" \
    --indicator.foreground="212" \
    --match.foreground="226" \
    --cursor-text.foreground="196" \
    --height=10 \
    --header="📁 Trial Directory Selection")

  echo -e "${YELLOW}Selected:${NC} $selected_trial" >&2
  # Handle cancellation
  if [[ -z "$selected_trial" ]]; then
    echo -e "${YELLOW}Cancelled.${NC}" >&2
    return 1
  fi

  # Process the selection
  if [[ "$selected_trial" == $CREATE_NEW ]]; then
    # Extract the suggested name from the selection
    local suggested_name=$(echo "$DATE_PREFIX-$SEARCH_TERM")

    # Prompt for final name
    echo -e "${GREEN}Enter new trial name:${NC}" >&2
    local new_name=$(gum input --value="$suggested_name" --prompt="> ")

    if [[ -z "$new_name" ]]; then
      echo -e "${YELLOW}Cancelled.${NC}" >&2
      return 1
    fi

    selected_trial=$(echo "$new_name" | sed 's/[[:space:]]/-/g')
  else
    # Selecting existing trial, remove the emoji prefix
    selected_trial=$(echo "$selected_trial" | sed 's/^📁 //')
  fi

  # Create the selected directory
  FULL_PATH="$TRIAL_DIR/$selected_trial"

  # Check if directory already exists
  if [[ -d "$FULL_PATH" ]]; then
    echo -e "📂 ${GREEN}Selected${NC} ${YELLOW}$selected_trial${NC}" >&2
  else
    mkdir -p "$FULL_PATH"
    echo -e "✨ ${GREEN}Created${NC} ${YELLOW}$selected_trial${NC}" >&2
  fi

  # Output the path to stdout for the shell function to use
  echo "$FULL_PATH"
}

# Run the function
main "$@"